---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import CommandPaletteWrapper from '../components/CommandPaletteWrapper.astro';
import '../styles/global.css';

export interface Props {
	title: string;
	description?: string;
}

const { 
	title, 
	description = "Ishan Pathak's portfolio - Full-stack developer and graduate student specializing in React, JavaScript, and AI."
} = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		
		<!-- Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Fira+Code:wght@400;500;600&display=swap" rel="stylesheet">
	</head>
	<body class="font-sans min-h-screen flex flex-col">
		<!-- Header with navigation -->
		<Header />
		
		<!-- Command Palette (accessible on all pages) -->
		<CommandPaletteWrapper />
		
		<!-- Main content -->
		<main class="flex-grow">
			<slot />
		</main>
		
		<!-- Footer -->
		<Footer />
		
		<script>
			// Handle dark mode toggle
			document.addEventListener('DOMContentLoaded', () => {
				const darkModeToggle = document.getElementById('darkModeToggle');
				
				// Check for saved theme preference or use OS preference
				const savedTheme = localStorage.getItem('theme');
				const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
				
				// Apply dark mode if saved or OS prefers it
				if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
					document.documentElement.classList.add('dark');
				}
				
				// Update toggle state
				if (darkModeToggle) {
					darkModeToggle.checked = document.documentElement.classList.contains('dark');
				}
				
				// Listen for toggle changes
				darkModeToggle?.addEventListener('change', (e) => {
					const target = e.target as HTMLInputElement;
					if (target.checked) {
						document.documentElement.classList.add('dark');
						localStorage.setItem('theme', 'dark');
					} else {
						document.documentElement.classList.remove('dark');
						localStorage.setItem('theme', 'light');
					}
				});
			});
		</script>
	</body>
</html>

<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
		--color-primary: #0070f3;
		--color-primary-dark: #0060df;
		--color-primary-rgb: 0, 112, 243; /* RGB values for animation effects */
		--color-text: #333;
		--color-background: #fff;
	}
	
	/* Base styles */
	html {
		font-family: 'Inter', system-ui, sans-serif;
		scroll-behavior: smooth;
	}
	
	body {
		margin: 0;
		transition: background-color 0.3s ease, color 0.3s ease;
	}
	
	/* Container */
	.container {
		width: 100%;
		max-width: 1200px;
		margin-left: auto;
		margin-right: auto;
		padding-left: 1rem;
		padding-right: 1rem;
	}
	
	/* Dark mode */
	.dark body {
		background-color: #111827;
		color: #f3f4f6;
	}
	
	/* Animation classes */
	.fade-in {
		animation: fadeIn 0.5s ease-in-out;
	}
	
	@keyframes fadeIn {
		from {
			opacity: 0;
			transform: translateY(10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
	
	/* Button styles */
	.btn {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		padding: 0.5rem 1rem;
		font-weight: 500;
		border-radius: 0.375rem;
		transition: all 0.2s ease;
		cursor: pointer;
	}
	
	.btn-primary {
		background-color: var(--color-primary, #3b82f6);
		color: white;
	}
	
	.btn-primary:hover {
		background-color: var(--color-primary-dark, #1d4ed8);
	}
	
	.btn-outline {
		background-color: transparent;
		border: 1px solid #e5e7eb;
		color: inherit;
	}
	
	.dark .btn-outline {
		border-color: #374151;
	}
	
	.btn-outline:hover {
		border-color: var(--color-primary, #3b82f6);
		color: var(--color-primary, #3b82f6);
	}
	
	/* Dark mode colors */
	:root.dark {
		--color-text: #f5f5f7;
		--color-background: #1a1a1a;
	}
</style>
